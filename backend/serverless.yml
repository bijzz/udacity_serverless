service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # default dev or passed by user
  region: ${opt:region, 'us-east-1'} # default us-east-1 or passed by user
  environment:
    TODO_TABLE: todoapp-todo-${self:provider.stage}
    TODO_TABLE_IDX_NAME : dueDateIndex
    ATTACHMENT_S3_BUCKET: todoapp-attachment-${self:provider.stage}
    #AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    #AUTH_0_SECRET: auth0Secret
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}


functions:

  # Auth:
  #   handler: src/lambda/auth/auth0Authorizer.handler

  # # TODO: Configure this function
  # GetTodos:
  #   handler: src/lambda/http/getTodos.handler
  #   events:
  #     - http:
  #         method: get
  #         path: todos

  # TODO: Configure this function
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true


  # # TODO: Configure this function
  # UpdateTodo:
  #   handler: src/lambda/http/updateTodo.handler
  #   events:
  #     - http:
  #         method: patch
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # DeleteTodo:
  #   handler: src/lambda/http/deleteTodo.handler
  #   events:
  #     - http:
  #         method: delete
  #         path: todos/{todoId}

  # # TODO: Configure this function
  # GenerateUploadUrl:
  #   handler: src/lambda/http/generateUploadUrl.handler
  #   events:
  #     - http:
  #         method: post
  #         path: todos/{todoId}/attachment

resources:
  Resources:
    # Dynamo DB Table for persisting ToDo's
    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          # only specify keys
          # non-key attributes are not required (due to schmealess nature)
          - AttributeName: todoId
            AttributeType: S # string type
          - AttributeName: createdAt
            AttributeType: S # string type
          # - AttributeName: name
          #   AttributeType: S # string type
          - AttributeName: dueDate
            AttributeType: S # boolean type
          # - AttributeName: done
          #   AttributeType: B # boolean type
         # - AttributeName: attachmentUrl
         #   AttributeType: S # string type
         # - AttributeName: userId
         #   AttributeType: S
        KeySchema:
          # composite key ( both together uniquely identify an item)
          - AttributeName: todoId 
            KeyType: HASH # partitionKey : what partition to write item to
          - AttributeName: createdAt 
            KeyType: RANGE # sortKey : to sort elements with the same partition key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
        # LocalSecondaryIndexes (LSI): Like an additional sort key
        # GlobalSecondaryIndexes (GSI) : Creates a copy with another partition / sort key
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_TABLE_IDX_NAME}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: dueDate
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}