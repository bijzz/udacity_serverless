service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'} # default dev or passed by user
  region: ${opt:region, 'us-east-1'} # default us-east-1 or passed by user


  environment:
    TODO_TABLE: todoapp-todo-${self:provider.stage}
    TODO_TABLE_IDX_NAME : dueDateIndex
    ATTACHMENT_S3_BUCKET: todoapp-attachment-${self:provider.stage}
    ATTACHMENT_URL: https://${self:provider.environment.ATTACHMENT_S3_BUCKET}.s3.amazonaws.com/
    AUTH_0_SECRET_ID: Auth0Secret-${self:provider.stage}
    AUTH_0_JWKS: https://dev-ev23cxso.eu.auth0.com/.well-known/jwks.json
    SIGNED_URL_EXPIRATION: 300
  # permissions set here would be active for all functions
  # iamRoleStatements:

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler


  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}/index/${self:provider.environment.TODO_TABLE_IDX_NAME}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          # placeholders {} are sent to the event.pathParameters
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}


  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODO_TABLE}

resources:
  Resources:
    # Dynamo DB Table for persisting ToDo's
    TodoDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          # only specify keys
          # non-key attributes are not required (due to schmealess nature)
          - AttributeName: todoId
            AttributeType: S # string type
          - AttributeName: userId
            AttributeType: S # string type
        KeySchema:
          # composite key ( both together uniquely identify an item)
          - AttributeName: todoId 
            KeyType: HASH # partitionKey : what partition to write item to
       #   - AttributeName: createdAt 
       #     KeyType: RANGE # sortKey : to sort elements with the same partition key
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODO_TABLE}
        # LocalSecondaryIndexes (LSI): Like an additional sort key
        # GlobalSecondaryIndexes (GSI) : Creates a copy with another partition / sort key
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODO_TABLE_IDX_NAME}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    AttachmentBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
 
    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          PolicyDocument:
            Id: MyPolicy
            Version: "2012-10-17"
            Statement:
              - Sid: PublicReadForGetBucketObjects
                Effect: Allow
                Principal: '*'
                Action: 's3:GetObject'
                Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
          Bucket: !Ref AttachmentBucket